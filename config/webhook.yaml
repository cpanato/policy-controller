# Copyright 2021 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webhook
  namespace: cosign-system
spec:
  selector:
    matchLabels:
      role: webhook
  template:
    metadata:
      labels:
        role: webhook
    spec:
      # To avoid node becoming SPOF, spread our replicas to different nodes.
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  role: webhook
              topologyKey: kubernetes.io/hostname
            weight: 100

      serviceAccountName: webhook
      # We use an init container to run cosign initialize in the main
      # container. Note that in order for the initialize to then "stick" for
      # the main container, we mount an empty dir where the tuf root then
      # gets initialized and will be used by the main container.
      initContainers:
      - name: cosign-initialize
        image: gcr.io/projectsigstore/cosign@sha256:9377edd13ae515dcb97c15052e577a2cbce098f36b0361bdb2348e3bdd8fe536 # cosign v1.10.1
        args: [
          "initialize",
          # Uncomment these to initialize with a custom TUF root.
          # TODO: How to specify the entire TUF directory for multiple
          # TUF roots.
          #"--mirror", "http://tuf.tuf-system.svc",
          #"--root", "/var/run/tuf/root.json",
        ]
        env:
        - name: HOME
          value: "/var/run/sigstore"
        volumeMounts:
        - name: tuf-root
          mountPath: "/var/run/tuf"
          readOnly: true
        - name: homedir
          mountPath: "/var/run/sigstore"
      containers:
      - name: webhook
        # This is the Go import path for the binary that is containerized
        # and substituted here.
        image: ko://github.com/sigstore/policy-controller/cmd/webhook
        args: ["-secret-name=verification-key"]
        resources:
          requests:
            cpu: 20m
            memory: 20Mi
          limits:
            cpu: 200m
            memory: 200Mi
        env:
        - name: SYSTEM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CONFIG_LOGGING_NAME
          value: config-logging
        - name: METRICS_DOMAIN
          value: sigstore.dev/policy
        - name: WEBHOOK_NAME
          value: webhook
        - name: KUBERNETES_MIN_VERSION
          value: "1.21.0"
        - name: HOME
          value: "/var/run/sigstore"

        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          capabilities:
            drop:
            - all

        volumeMounts:
        - name: homedir
          mountPath: "/var/run/sigstore"

        readinessProbe: &probe
          failureThreshold: 6
          initialDelaySeconds: 20
          periodSeconds: 1
          httpGet:
            scheme: HTTPS
            port: 8443
            httpHeaders:
            - name: k-kubelet-probe
              value: "webhook"
        livenessProbe: *probe

      # Our webhook should gracefully terminate by lame ducking first, set this to a sufficiently
      # high value that we respect whatever value it has configured for the lame duck grace period.
      terminationGracePeriodSeconds: 300

      volumes:
      - emptyDir: {}
        name: homedir
      - name: tuf-root
        secret:
          secretName: tuf-root
          # This is marked as optional, since if you are using public
          # instance, TUF root is built in to the cosign container.
          optional: true
          items:
          - key: root
            path: root.json

---
apiVersion: v1
kind: Secret
metadata:
  name: verification-key
  namespace: cosign-system
# stringData:
#   cosign.pub: |
#     <PEM encoded public key>
---
